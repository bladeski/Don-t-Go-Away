name: 🔧 Build and Test .NET Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: 🏗️ Build, Test & Package
    runs-on: windows-latest

    steps:
    - name: Add MakeAppx.exe to PATH
      run: |
        $makeAppxPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter MakeAppx.exe |
          Sort-Object LastWriteTime -Descending |
          Select-Object -First 1 |
          Split-Path
        echo "Using MakeAppx.exe from: $makeAppxPath"
        echo "$makeAppxPath" | Out-File -Append $env:GITHUB_PATH

    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: Decode PFX certificate
      shell: pwsh
      run: |
        [IO.File]::WriteAllBytes("cert.pfx", [Convert]::FromBase64String("${{ secrets.PFX_BASE64 }}"))

    - name: 🔍 Locate cert file
      shell: pwsh
      run: Get-ChildItem -Path "." -Recurse -Filter *.pfx | Format-Table FullName, Length, LastWriteTime

    - name: Check certificate
      shell: pwsh
      run: |
        $securePassword = ConvertTo-SecureString "${{ secrets.PFX_PASSWORD }}" -AsPlainText -Force
        $cert = Get-PfxCertificate -FilePath "${{ github.workspace }}\cert.pfx" -Password $securePassword
        Write-Host "Certificate Subject: $($cert.Subject)"

    - name: Import certificate to user store
      shell: pwsh
      run: |
        $securePassword = ConvertTo-SecureString "${{ secrets.PFX_PASSWORD }}" -AsPlainText -Force
        Import-PfxCertificate -FilePath "${{ github.workspace }}\cert.pfx" -CertStoreLocation "Cert:\CurrentUser\My" -Password $securePassword

    - name: Get certificate thumbprint
      id: cert
      shell: pwsh
      run: |
        $securePassword = ConvertTo-SecureString "${{ secrets.PFX_PASSWORD }}" -AsPlainText -Force
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("${{ github.workspace }}\cert.pfx", $securePassword)
        Write-Output "thumbprint=$($cert.Thumbprint)" >> $env:GITHUB_OUTPUT

    - name: 🧰 Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: 📦 Restore dependencies (all projects)
      run: dotnet restore # no RID here

    - name: 🏗 Build app logic projects (no RID)
      run: dotnet build "Don't Go Away\Don't Go Away.csproj" --no-restore -c Release /p:Platform=x64

    - name: 🧪 Run tests
      run: dotnet test "Unit Tests/Unit Tests.csproj" --verbosity normal

    - name: 📦 Build & Package MSIX (auto-detect MSBuild)
      shell: pwsh
      run: |
        # Find the latest MSBuild.exe from any Visual Studio installation
        $msbuildPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
          -latest `
          -products * `
          -requires Microsoft.Component.MSBuild `
          -find MSBuild\**\Bin\MSBuild.exe

        if (-not $msbuildPath) {
          throw "MSBuild.exe not found. Ensure Visual Studio Build Tools with MSIX/UWP workloads are installed."
        }

        Write-Host "Using MSBuild at: $msbuildPath"

        # Run the build with the right project + settings
        & $msbuildPath "Packaging\Packaging.wapproj" `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:GenerateAppxPackageOnBuild=true `
          /p:AppxPackageDir="msix\" `
          /p:AppxBundle=Never `
          /p:PackageCertificateThumbprint="${{ steps.cert.outputs.thumbprint }}"

    # 🔹 Also publish unpackaged for quick runs
    - name: 📤 Publish unpackaged build
      run: |
        dotnet publish "Don't Go Away\Don't Go Away.csproj" `
          -c Release `
          -r win-x64 `
          /p:Platform=x64

    - name: 🏷️ Create Git Tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag v1.0.${{ github.run_number }}
        git push origin v1.0.${{ github.run_number }}

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: "Release v1.0.${{ github.run_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug - list MSIX files
      shell: pwsh
      run: |
        Get-ChildItem -Path "${{ github.workspace }}" -Recurse -Filter *.msix |
          ForEach-Object { Write-Host $_.FullName }

    - name: Find App MSIX
      id: findmsix
      shell: pwsh
      run: |
        # Set your workspace path
        $workspace = "D:\a\Don-t-Go-Away\Don-t-Go-Away"

        # Look only where the packaging step writes its output
        $msix = Get-ChildItem -Path "$workspace\Don't Go Away\msix" -Filter *.msix -Recurse |
            Where-Object {
                $_.Name -notmatch 'WindowsAppRuntime' -and
                $_.Name -notmatch 'Main.msix' -and
                $_.Name -notmatch 'Singleton.msix'
            } |
            Sort-Object LastWriteTime -Descending |
            Select-Object -First 1

        if (-not $msix) {
            throw "No app MSIX found!"
        }

        Write-Host "Found MSIX: $($msix.FullName)"

    - name: Upload MSIX to Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        files: ${{ steps.findmsix.outputs.msix_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}